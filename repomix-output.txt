This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-05-09T20:16:44.257Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app.js
index.html
style.css

================================================================
Repository Files
================================================================

================
File: app.js
================
// Timeline Data
const stepsData = [
    {"title":"Initial Inspection", "img":"/assets/steps/initialInspection.png", "video":"/videos/initialInspection.mp4"},
    {"title":"Remove Worn Lining", "img":"/assets/steps/rmvWornLining.png", "video":"/videos/rmvWornLining.mp4"},
    {"title":"Surface Preparation", "img":"/assets/steps/surfacePerparation.png", "video":"/videos/surfacePreparation.mp4"},
    {"title":"Tinning Process", "img":"/assets/steps/tinningProcess.png", "video":"/videos/tinningProcess.mp4"},
    {"title":"Tinning Complete", "img":"/assets/steps/tinningComplete.png", "video":"/videos/tinningComplete.mp4"},
    {"title":"Proof Machining", "img":"/assets/steps/proofMachining.png", "video":"/videos/proofMachining.mp4"},
    {"title":"Centrifugal Casting", "img":"/assets/steps/centrifugalCasting.png", "video":"/videos/centrifugalCasting.mp4"},
    {"title":"Ultrasonic NDT", "img":"/assets/steps/ultrasonicNDT.png", "video":"/videos/ultrasonicNDT.mp4"},
    {"title":"Final Machining", "img":"/assets/steps/finalMachining.png", "video":"/videos/finalMachining.mp4"},
    {"title":"Dye-Penetrant NDT", "img":"/assets/steps/dyePenetrantNDT.png", "video":"/videos/dyePenetrantNDT.mp4"},
    {"title":"Dimensional Inspection", "img":"/assets/steps/dimensionalInspection.png", "video":"/videos/dimensionalInspection.mp4"},
    {"title":"Ready for Packing", "img":"/assets/steps/ready4Packing.png", "video":"/videos/readyForPacking.mp4"}
  ];
  
  // DOM Elements
  const timelineEl = document.getElementById('timeline');
  const modal = document.getElementById('videoModal');
  const modalTitle = document.getElementById('modalTitle');
  const modalVideo = document.getElementById('modalVideo');
  const closeModalBtns = document.querySelectorAll('[data-close-modal]');
  
  // Initialize the application
  document.addEventListener('DOMContentLoaded', function() {
    initializeTimeline();
    setupModalEvents();
    requestFullscreen();
  });
  
  // Create and render the timeline steps
  function initializeTimeline() {
    stepsData.forEach((step, index) => {
      const stepEl = createTimelineStep(step, index);
      timelineEl.appendChild(stepEl);
    });
  }
  
  // Create a single timeline step element
  function createTimelineStep(step, index) {
    const stepEl = document.createElement('div');
    stepEl.className = 'timeline-step';
    
    const contentEl = document.createElement('div');
    contentEl.className = 'step-content';
    
    const circleEl = document.createElement('button');
    circleEl.className = 'step-circle';
    circleEl.setAttribute('aria-label', `View video about ${step.title}`);
    circleEl.setAttribute('data-step-index', index);
    
    const imgEl = document.createElement('img');
    imgEl.src = step.img;
    imgEl.alt = `${step.title} process step`;
    imgEl.loading = 'lazy';
    
    const titleEl = document.createElement('div');
    titleEl.className = 'step-title';
    titleEl.textContent = step.title;
    
    circleEl.appendChild(imgEl);
    contentEl.appendChild(titleEl);
    
    stepEl.appendChild(circleEl);
    stepEl.appendChild(contentEl);
    
    // Add event listener to circle button
    circleEl.addEventListener('click', () => {
      openModal(step);
    });
    
    return stepEl;
  }
  
  // Open modal with specified video
  function openModal(step) {
    // Pause page scrolling
    document.body.style.overflow = 'hidden';
    
    // Update modal content
    modalTitle.textContent = step.title;
    modalVideo.src = step.video;
    
    // Show modal
    modal.setAttribute('aria-hidden', 'false');
    
    // Focus on the first focusable element in the modal
    setTimeout(() => {
      closeModalBtns[0].focus();
    }, 100);
    
    // Start video playback
    modalVideo.play().catch(err => {
      console.warn('Video autoplay failed:', err);
    });
    
    // Set up focus trap
    setupFocusTrap();
  }
  
  // Close the modal
  function closeModal() {
    // Restore scrolling
    document.body.style.overflow = '';
    
    // Hide modal
    modal.setAttribute('aria-hidden', 'true');
    
    // Pause the video
    modalVideo.pause();
    
    // Return focus to the element that opened the modal
    const activeStepIndex = modalVideo.dataset.activeStepIndex;
    if (activeStepIndex) {
      const stepBtn = document.querySelector(`.step-circle[data-step-index="${activeStepIndex}"]`);
      if (stepBtn) {
        stepBtn.focus();
      }
    }
  }
  
  // Set up modal events
  function setupModalEvents() {
    // Close modal when close button or overlay is clicked
    closeModalBtns.forEach(btn => {
      btn.addEventListener('click', closeModal);
    });
    
    // Close modal on ESC key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && modal.getAttribute('aria-hidden') === 'false') {
        closeModal();
      }
    });
    
    // When video ends, focus on close button
    modalVideo.addEventListener('ended', function() {
      closeModalBtns[0].focus();
    });
  }
  
  // Focus trap inside modal
  function setupFocusTrap() {
    const focusableElements = modal.querySelectorAll('button, [tabindex]:not([tabindex="-1"])');
    const firstElement = focusableElements[0];
    const lastElement = focusableElements[focusableElements.length - 1];
    
    modal.addEventListener('keydown', function(e) {
      if (e.key === 'Tab') {
        // If SHIFT + TAB
        if (e.shiftKey) {
          if (document.activeElement === firstElement) {
            lastElement.focus();
            e.preventDefault();
          }
        } 
        // If just TAB
        else {
          if (document.activeElement === lastElement) {
            firstElement.focus();
            e.preventDefault();
          }
        }
      }
    });
  }
  
  // Request fullscreen mode
  function requestFullscreen() {
    document.addEventListener('click', function() {
      const docEl = document.documentElement;
      
      if (docEl.requestFullscreen) {
        docEl.requestFullscreen();
      } else if (docEl.webkitRequestFullscreen) {
        docEl.webkitRequestFullscreen();
      } else if (docEl.mozRequestFullScreen) {
        docEl.mozRequestFullScreen();
      } else if (docEl.msRequestFullscreen) {
        docEl.msRequestFullscreen();
      }
    }, { once: true });
    
    // For touch screens
    document.addEventListener('touchend', function() {
      const docEl = document.documentElement;
      
      if (docEl.requestFullscreen) {
        docEl.requestFullscreen();
      } else if (docEl.webkitRequestFullscreen) {
        docEl.webkitRequestFullscreen();
      } else if (docEl.mozRequestFullScreen) {
        docEl.mozRequestFullScreen();
      } else if (docEl.msRequestFullscreen) {
        docEl.msRequestFullscreen();
      }
    }, { once: true });
  }

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>White Metal Bearing Refurbishment</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Heebo:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
    <base href="/oman-tablet-app/">
</head>
<body>
    <header class="main-header">
        <img src="/assets/colherneOmanHeader.png" alt="Coleherne and Hydro partnership header" class="header-bg">
    </header>

    <main>
        <h1>Timeline Start to Finish White Metal Bearing Refurbishment:</h1>
        
        <div class="timeline-container">
            <div class="timeline" id="timeline">
                <!-- Timeline steps will be dynamically inserted here -->
            </div>
        </div>
    </main>

    <div class="modal" id="videoModal" aria-hidden="true">
        <div class="modal-overlay" tabindex="-1" data-close-modal></div>
        <div class="modal-content" role="dialog" aria-labelledby="modalTitle">
            <button class="close-modal" aria-label="Close video" data-close-modal>✕</button>
            <h2 id="modalTitle"></h2>
            <div class="video-container">
                <video id="modalVideo" controls></video>
            </div>
        </div>
    </div>

    <script src="app.js" defer></script>
</body>
</html>

================
File: style.css
================
/* Base Styles */
*, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

:root {
    --hit: 130px; /* 0.6-0.7″ on a 1080p portrait TV */
}

html, body {
    height: 100%;
    width: 100%;
    overflow-x: hidden;
    font-family: 'Heebo', sans-serif;
    font-size: 20px;
    line-height: 1.5;
    color: #333;
    background-color: #f5f5f5;
}

body {
    display: flex;
    flex-direction: column;
    position: relative;
    max-width: none;
    height: 100%;
    margin: 0 auto;
    background: linear-gradient(135deg, #e0e0e0 0%, #c8c8c8 40%, #b0b0b0 100%);
    background-size: cover;
    background-color: #e0e0e0;
}

img, video {
    max-width: 100%;
    height: auto;
}

/* Header Styles */
.main-header {
    position: relative;
    width: 100%;
    height: auto;
    overflow: hidden;
    text-align: center;
}

.header-bg {
    width: 100%;
    max-width: 100%;
    height: auto;
    object-fit: contain;
    display: block;
}

/* Main Content Styles */
main {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
}

h1 {
    text-align: center;
    color: #0077b6;
    margin: 20px 0 40px;
    font-size: 28px;
    font-weight: bold;
}

/* Timeline Styles */
.timeline-container {
    position: relative;
    width: 100%;
    padding: 20px 0;
}

.timeline {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px 0;
}

.timeline::before {
    content: '';
    position: absolute;
    width: 12px; /* Keep the spine proportional */
    background-color: #0077b6;
    top: 0;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    border-radius: 4px;
}

.timeline-step {
    position: relative;
    margin-bottom: 100px; /* Increased from 60px to 100px */
}

.timeline-step:last-child {
    margin-bottom: 0;
}

.timeline-step:nth-child(even) {
    left: 50%;
    padding-left: 100px;
}

.timeline-step:nth-child(odd) {
    left: 0;
    padding-right: calc(50% + 100px);
    text-align: right;
}

.step-content {
    display: inline-block;
}

.step-circle {
    position: absolute;
    width: var(--hit);
    height: var(--hit);
    border-radius: 50%;
    background-color: #0077b6;
    border: 6px solid #f5f5f5;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.3s ease;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);

    z-index: 1;}

.step-circle:hover, .step-circle:focus {
    transform: scale(1.1);
}

/* Quick ripple effect */
.step-circle:active::after {
    content: '';
    position: absolute;
    inset: 0;
    background: rgba(255,255,255,.25);
    border-radius: 50%;
    animation: ripple .25s ease-out;
}

@keyframes ripple {
    from {transform: scale(.2); opacity: .8}
    to {transform: scale(1.4); opacity: 0}
}

.step-circle img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.timeline-step:nth-child(odd) .step-circle {
    right: calc(50% - 40px);
}

.timeline-step:nth-child(even) .step-circle {
    left: calc(0% - 40px);
}

.step-title {
    margin-top: 10px;
    font-weight: bold;
    font-size: 18px;
    color: #0077b6;
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
}

.modal[aria-hidden="false"] {
    display: block;
}

.modal-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
}

.modal-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    max-width: 800px;
    background-color: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
    max-height: 90vh;
    overflow-y: auto;
}

.close-modal {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 44px;
    height: 44px;
    font-size: 24px;
    background-color: #0077b6;
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;
}

.close-modal:hover, .close-modal:focus {
    background-color: #005b8a;
}

#modalTitle {
    margin-top: 10px;
    margin-bottom: 20px;
    padding-right: 50px;
    color: #0077b6;
}

.video-container {
    position: relative;
    width: 100%;
    padding-top: 56.25%; /* 16:9 Aspect Ratio */
}

#modalVideo {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 4px;
}

/* Accessibility focus styles */
button:focus, [tabindex]:focus {
    outline: 3px solid #0077b6;
    outline-offset: 2px;
}

/* Media queries for smaller screens */
@media (max-width: 767px) {
    .timeline::before {
        left: 40px;
    }
    
    .timeline-step {
        padding-left: 80px !important;
        padding-right: 0 !important;
        left: 0 !important;
        text-align: left !important;
    }
    
    .step-circle {
        left: 0 !important;
        right: auto !important;
    }
}

/* For touch devices */
@media (hover: none) {
    .step-circle:hover {
        transform: none;
    }
}

/* For fullscreen mode */
body:-webkit-full-screen {
    width: 100%;
    height: 100%;
}

body:-moz-full-screen {
    width: 100%;
    height: 100%;
}

body:fullscreen {
    width: 100%;
    height: 100%;
}
